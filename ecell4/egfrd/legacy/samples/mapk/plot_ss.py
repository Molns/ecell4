#!/usr/bin/env python


import sys
import string

import numpy
import scipy.io
from matplotlib.pylab import *

N_A = 6.0221367e23

E2 = 5
V = 1e-15

theory_processive = [
[0.0, -5.27305425227e-23
],[0.0169491525424, 0.00618395580968
],[0.0344827586207, 0.0126410656621
],[0.0526315789474, 0.0193885931926
],[0.0714285714286, 0.0264450527921
],[0.0909090909091, 0.0338302814594
],[0.111111111111, 0.0415655055698
],[0.132075471698, 0.0496733978795
],[0.153846153846, 0.0581781204059
],[0.176470588235, 0.0671053448887
],[0.2, 0.0764822433864
],[0.224489795918, 0.0863374367697
],[0.25, 0.0967008868949
],[0.276595744681, 0.107603714637
],[0.304347826087, 0.11907792693
],[0.333333333333, 0.131156021049
],[0.363636363636, 0.143870448847
],[0.395348837209, 0.157252912133
],[0.428571428571, 0.171333452972
],[0.463414634146, 0.186139337987
],[0.5, 0.201693707136
],[0.538461538462, 0.218014033955
],[0.578947368421, 0.23511038812
],[0.621621621622, 0.252983636755
],[0.666666666667, 0.271623673863
],[0.714285714286, 0.291007871395
],[0.764705882353, 0.311099946807
],[0.818181818182, 0.33184947902
],[0.875, 0.35319226106
],[0.935483870968, 0.375051603693
],[1.0, 0.397340604328
],[1.06896551724, 0.419965244186
],[1.14285714286, 0.442828039593
],[1.22222222222, 0.465831892936
],[1.30769230769, 0.48888375926
],[1.4, 0.511897786296
],[1.5, 0.534797680627
],[1.60869565217, 0.557518212254
],[1.72727272727, 0.580005858716
],[1.85714285714, 0.60221869894
],[2.0, 0.624125745369
],[2.15789473684, 0.645705874051
],[2.33333333333, 0.666946550819
],[2.52941176471, 0.687842459734
],[2.75, 0.708394186238
],[3.0, 0.728606980108
],[3.28571428571, 0.748489666301
],[3.61538461538, 0.768053700035
],[4.0, 0.787312385738
],[4.45454545455, 0.806280231902
],[5.0, 0.82497243947
],[5.66666666667, 0.843404499901
],[6.5, 0.861591886943
],[7.57142857143, 0.879549825948
],[9.0, 0.897293126145
],[11.0, 0.91483606308
],[14.0, 0.932192299753
],[19.0, 0.949374839011
],[29.0, 0.966395998829
],[59.0, 0.983267405563
]]

theory_m2 = [ 
[0.0, -2.6050060107e-12
],[0.0169491525424, 4.1726932254e-05
],[0.0344827586207, 0.00017340186528
],[0.0526315789474, 0.000405734956952
],[0.0714285714286, 0.000750899812543
],[0.0909090909091, 0.00122278465416
],[0.111111111111, 0.00183729678762
],[0.132075471698, 0.00261273438036
],[0.153846153846, 0.00357024348137
],[0.176470588235, 0.00473438411681
],[0.2, 0.00613383752078
],[0.224489795918, 0.00780229706417
],[0.25, 0.00977960215644
],[0.276595744681, 0.0121131959427
],[0.304347826087, 0.0148600209274
],[0.333333333333, 0.0180890151417
],[0.363636363636, 0.0218844429173
],[0.395348837209, 0.0263504133496
],[0.428571428571, 0.0316170861612
],[0.463414634146, 0.037849393662
],[0.5, 0.0452594862764
],[0.538461538462, 0.0541248966006
],[0.578947368421, 0.0648156102379
],[0.621621621622, 0.0778352562045
],[0.666666666667, 0.0938848068051
],[0.714285714286, 0.113961311067
],[0.764705882353, 0.139505064052
],[0.818181818182, 0.172581904316
],[0.875, 0.215925641491
],[0.935483870968, 0.272061418162
],[1.0, 0.339981259053
],[1.06896551724, 0.411782644849
],[1.14285714286, 0.477929827348
],[1.22222222222, 0.534517726141
],[1.30769230769, 0.582070446881
],[1.4, 0.622320116141
],[1.5, 0.65688754206
],[1.60869565217, 0.687030668062
],[1.72727272727, 0.713684040506
],[1.85714285714, 0.737540544094
],[2.0, 0.759119968082
],[2.15789473684, 0.778818522312
],[2.33333333333, 0.796943264064
],[2.52941176471, 0.813735952737
],[2.75, 0.829389736144
],[3.0, 0.844060982567
],[3.28571428571, 0.857877822673
],[3.61538461538, 0.870946385567
],[4.0, 0.883355447068
],[4.45454545455, 0.89517992926
],[5.0, 0.906483575258
],[5.66666666667, 0.91732101795
],[6.5, 0.927739398329
],[7.57142857143, 0.937779645026
],[9.0, 0.947477495567
],[11.0, 0.956864318972
],[14.0, 0.965967783848
],[19.0, 0.974812405214
],[29.0, 0.983419995338
],[59.0, 0.991810037797],
]

theory_m6 = [
[0.0, -1.65261198743e-13
],[0.0169491525424, 4.28300454725e-05
],[0.0344827586207, 0.000177926757205
],[0.0526315789474, 0.000416180632444
],[0.0714285714286, 0.000769962658533
],[0.0909090909091, 0.00125337741692
],[0.111111111111, 0.00188256986967
],[0.132075471698, 0.00267609957258
],[0.153846153846, 0.00365540054045
],[0.176470588235, 0.00484535047494
],[0.2, 0.00627498131053
],[0.224489795918, 0.00797837388893
],[0.25, 0.00999579542646
],[0.276595744681, 0.0123751606454
],[0.304347826087, 0.0151739300576
],[0.333333333333, 0.0184616067391
],[0.363636363636, 0.0223230646984
],[0.395348837209, 0.0268630514727
],[0.428571428571, 0.0322123776372
],[0.463414634146, 0.0385365748342
],[0.5, 0.0460482370199
],[0.538461538462, 0.0550249667196
],[0.578947368421, 0.0658360104246
],[0.621621621622, 0.0789825560621
],[0.666666666667, 0.0951595468031
],[0.714285714286, 0.115350298256
],[0.764705882353, 0.140964470541
],[0.818181818182, 0.174000260491
],[0.875, 0.217050559371
],[0.935483870968, 0.272414515188
],[1.0, 0.338995868443
],[1.06896551724, 0.409354891548
],[1.14285714286, 0.474524621086
],[1.22222222222, 0.530647963002
],[1.30769230769, 0.578061776054
],[1.4, 0.618347860703
],[1.5, 0.653042236963
],[1.60869565217, 0.683358195849
],[1.72727272727, 0.710206610145
],[1.85714285714, 0.734267499571
],[2.0, 0.756053498469
],[2.15789473684, 0.775956782148
],[2.33333333333, 0.79428213613
],[2.52941176471, 0.811270071993
],[2.75, 0.827113096894
],[3.0, 0.841967309456
],[3.28571428571, 0.855960787438
],[3.61538461538, 0.869199746214
],[4.0, 0.881773127284
],[4.45454545455, 0.893756064718
],[5.0, 0.905212538065
],[5.66666666667, 0.916197427144
],[6.5, 0.926758121728
],[7.57142857143, 0.936935795324
],[9.0, 0.946766423063
],[11.0, 0.956281602385
],[14.0, 0.965509219966
],[19.0, 0.974473998166
],[29.0, 0.98319794569
],[59.0, 0.991700731978],
]

theory_0 = [
 
[0.0, 4.17636606387e-12
],[0.0169491525424, 4.28301602653e-05
],[0.0344827586207, 0.000177927221743
],[0.0526315789474, 0.000416181696075
],[0.0714285714286, 0.00076996459648
],[0.0909090909091, 0.00125338053316
],[0.111111111111, 0.00188257448896
],[0.132075471698, 0.00267610602999
],[0.153846153846, 0.00365540921268
],[0.176470588235, 0.00484536175401
],[0.2, 0.00627499568397
],[0.224489795918, 0.00797839181886
],[0.25, 0.00999581742413
],[0.276595744681, 0.0123751872798
],[0.304347826087, 0.0151739619653
],[0.333333333333, 0.0184616445984
],[0.363636363636, 0.0223231092497
],[0.395348837209, 0.0268631030636
],[0.428571428571, 0.032212438051
],[0.463414634146, 0.0385366445255
],[0.5, 0.0460483169828
],[0.538461538462, 0.0550250579125
],[0.578947368421, 0.0658361137306
],[0.621621621622, 0.078982672074
],[0.666666666667, 0.0951596755631
],[0.714285714286, 0.115350438294
],[0.764705882353, 0.140964617333
],[0.818181818182, 0.174000401238
],[0.875, 0.217050674031
],[0.935483870968, 0.272414549138
],[1.0, 0.338995768302
],[1.06896551724, 0.409354648302
],[1.14285714286, 0.474524276408
],[1.22222222222, 0.53064757517
],[1.30769230769, 0.578061371731
],[1.4, 0.618347459581
],[1.5, 0.653041848294
],[1.60869565217, 0.683357824352
],[1.72727272727, 0.710206258217
],[1.85714285714, 0.734267168217
],[2.0, 0.756053187918
],[2.15789473684, 0.775956492266
],[2.33333333333, 0.7942818665
],[2.52941176471, 0.81126982258
],[2.75, 0.827112866147
],[3.0, 0.84196709724
],[3.28571428571, 0.855960593123
],[3.61538461538, 0.869199569155
],[4.0, 0.881772966867
],[4.45454545455, 0.893755920348
],[5.0, 0.90521240916
],[5.66666666667, 0.916197313254
],[6.5, 0.926758022244
],[7.57142857143, 0.936935709764
],[9.0, 0.946766350971
],[11.0, 0.956281543318
],[14.0, 0.965509173491
],[19.0, 0.974473963862
],[29.0, 0.983197923179
],[59.0, 0.991700720896],
]

def file_mean(filename, skip):
    ycolumns = [1, ]
    #ycolumns = [2,6]
    #ycolumns = [3,5]
    #ycolumns = [2,6,3,5]

    f = open(filename)
    f.seek(-1000, os.SEEK_END)
    lines = f.readlines()

    lastline = lines[-1]

    lastlinedata = lastline.split()
    if lastlinedata[0] < skip-1:
            raise 'oops'

    y = float(lastlinedata[1])

    return y

    
#     data = load(filename)
#     x = data[:,0]
#     y = data[:,ycolumns[0]]

#     start = x.searchsorted(skip) - 1
#     if len(x)<=start:
#         return None

#     return y[start]

#     x = x[start:]
#     y = y[start:]
#     #print x[-1]

#     xdiff = x[1:] - x[:-1] 
#     yscaled = y[:-1] * xdiff
#     yscaledmean = yscaled.sum() / (x[-1] - x[0])
#     print yscaledmean, y.mean()
#     #return y.mean()
#     return yscaledmean



import glob
import fnmatch
import os

model = 'mapk5'
#model = 'mapk6'
V_str = '1e-15'
D_ratio_str = '1'
#N_KK_str = 
N_P_str = '30'
N_K_total_str = '120'
#ti_str = '1e-2'
ti_str = '1e-6'
theory = numpy.array(theory_m6)
#theory = numpy.array(theory_m2)
theory_processive = numpy.array(theory_processive)

T = '60'


skip = float(T) #*0.95

#dir = sys.argv[1]
dir = '13/data'
#dir = '15/data'
#outdir = sys.argv[2]
#pattern = sys.argv[2]
#globpattern = pattern.replace('ALL','*') + '_*.dat'

lines=[]
#os.chdir(dir)

#for ti_str in ['0','1e-6','1e-4','1e-2']:
#for D_ratio_str in ['0.03125','0.0625','0.125','0.25','0.5','1','2','4']:
for D_ratio_str in ['0.03125','0.0625','0.25','1','4']:
#for D_ratio_str in ['0.03125']:

    x = []
    mean = []
    std_err = []

    for N_KK in range(1, 60):
        globpattern = \
            '_'.join((model, V_str, D_ratio_str, str(N_KK), '*',
                      N_K_total_str, ti_str,\
                          '*')) +\
                            '_tc.dat'

        filelist = glob.glob(dir + os.sep + globpattern)

        print globpattern

        if not filelist:
            continue
        
        for N_P in range(60):

            fnpattern = \
                '_'.join((model, V_str, D_ratio_str, str(N_KK), str(N_P),
                          N_K_total_str, ti_str,\
                              '*')) +\
                                '_tc.dat'
            filelist2 = fnmatch.filter(filelist, dir + os.sep + fnpattern)
            if not filelist2:
                continue
            #print filelist2


            data = []

            for file in filelist2:
                print file
                res = file_mean(file, skip)

                data.append(res)

            data = numpy.array(data)
            data /= int(N_K_total_str)
            
            x.append(float(N_KK)/float(N_P))
            mean.append(data.mean())
            std_err.append(data.std()/math.sqrt(len(data)))

            print x, mean, std_err

            break


    axes([.14,.14,.8,.8])
    line=semilogx(x, mean)
    lines.append(line)
    errorbar(x, mean, yerr=std_err, fmt='k+')

#     axes([.62,.20,.29,.29])
#     plot(x, mean)

    #errorbar(x2, mean2, yerr=std_err, fmt='k+')

tx, ty = theory[:,0], theory[:,1]
ptx, pty = theory_processive[:,0], theory_processive[:,1]

# main
axes([.14,.14,.8,.8])

#processive
D_ratio_str = '0.03125'

dir='15/data'
model='mapk6'

x = []
mean = []
std_err = []


for N_KK in range(1, 60):
    globpattern = \
        '_'.join((model, V_str, D_ratio_str, str(N_KK), '*',\
                  N_K_total_str, ti_str,\
                      '*')) +\
                        '_tc.dat'

    filelist = glob.glob(dir + os.sep + globpattern)

    print globpattern

    if not filelist:
        continue
        
    for N_P in range(1,60):

        fnpattern = \
            '_'.join((model, V_str, D_ratio_str, str(N_KK), str(N_P),\
                      N_K_total_str, ti_str,\
                          '*')) +\
                            '_tc.dat'
        filelist2 = fnmatch.filter(filelist, dir + os.sep + fnpattern)
        if not filelist2:
            continue

        data = []

        for file in filelist2:
            print file
            res = file_mean(file, skip)

            data.append(res)

        data = numpy.array(data)
        data /= int(N_K_total_str)
            
        x.append(float(N_KK)/float(N_P))
        mean.append(data.mean())
        std_err.append(data.std()/math.sqrt(len(data)))

        print x, mean, std_err

        break


axes([.14,.14,.8,.8])
line=semilogx(x, mean, 'b--', linewidth=2)
lines.append(line)
# axes([.62,.20,.29,.29])
# plot(x, mean, 'b--', lw=2)

#ODE
axes([.14,.14,.8,.8])
lines.append(semilogx(ptx, pty, 'k--', linewidth=2))
lines.append(semilogx(tx, ty, 'k-', linewidth=2))


axes([.14,.14,.8,.8])

xlim([0.005,200])
ylim([-0.02, 1.01])
xticks([1e-2, 1e-1, 1, 1e1, 1e2], ['0.01', '0.1', '1', '10', '100'], size=22)
yticks([0,0.5,1],size=22)
xlabel(r'$\rm{[KK] / [P]}$', size=28)
ylabel(r'$\rm{[Kpp] / [K]_{total}}$', size=28)


#grid()

leg =legend( lines, (r'$D=0.03 \ \ {\rm \mu m^2 / s}$',
              r'$D=0.06 \ \  {\rm \mu m^2 / s}$',
#              r'$D=0.13 \ \  {\rm \mu m^2 / s}$',
              r'$D=0.25 \ \  {\rm \mu m^2 / s}$',
              r'$D=1.0 \ \  {\rm \mu m^2 / s}$',
              r'$D=4.0 \ \  {\rm \mu m^2 / s}$',
              r'Processive $(D=0.03)$',
              r'Processive ODE$(D=1)$',
              r'Distributive ODE$(D=1)$',
              ),
             loc=2,
             shadow=True,
             pad=0.05,
             labelsep=0
             )
for l in leg.get_lines():
    l.set_linewidth(2)  # the legend line width



# inset
# axes([.62,.20,.29,.29])
# plot(ptx, pty, 'k--', linewidth=2)
# plot(tx, ty, 'k-', linewidth=2)
# xlim([0.001,1])
# ylim([-0.02,0.4])
# xticks([.1,.5,1],size=18)
# yticks([0,.1,.2,.3,.4,.5],size=18)
show()
#savefig(outdir + '/' + figtitle + '.png', dpi=80)

