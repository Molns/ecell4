
Tutorial 3 (World Basics)
=========================

This is a tutorial for E-Cell4. Here, we explain the basics of ``World``
classes. In E-Cell4, four types of World classes are offically
supported: ``LatticeWorld``, ``BDWorld``, ``GillespieWorld``, and
``ODEWorld``. In this section, the common interfaces of these classes
are introduced.

World classes accept different sets of arguments. However, at least, any
``World`` classes can be instantiated only with their size, named
``edge_lengths``. The type of ``edge_lengths`` is ``Real3``, which
represents a triplet of ``Real``\ s. In E-Cell4, all 3-dimensional
positions are treated as a ``Real3``.

.. code:: python

    from ecell4.core import *
    from ecell4.gillespie import GillespieWorld
    from ecell4.ode import ODEWorld
    from ecell4.lattice import LatticeWorld
    from ecell4.bd import BDWorld
    
    edge_lengths = Real3(1, 2, 3)
    w1 = GillespieWorld(edge_lengths)
    w2 = ODEWorld(edge_lengths)
    w3 = LatticeWorld(edge_lengths)
    w4 = BDWorld(edge_lengths)
A World has getter methods for the size and volume.

.. code:: python

    print tuple(w1.edge_lengths()), w1.volume()
    print tuple(w2.edge_lengths()), w2.volume()
    print tuple(w3.edge_lengths()), w3.volume()
    print tuple(w4.edge_lengths()), w4.volume()

.. parsed-literal::

    (1.0, 2.0, 3.0) 6.0
    (1.0, 2.0, 3.0) 6.0
    (1.0, 2.0, 3.0) 6.0
    (1.0, 2.0, 3.0) 6.0


Next, let's add molecules into the World. Here, you must give Species
attributed with "radius" and "D" for BDWorld or LatticeWorld to tell the
shape of molecules. Positions of the molecules are randomly generated by
the World if needed.

.. code:: python

    w1.add_molecules(Species("A", "0.0025", "1"), 10)
    w2.add_molecules(Species("A", "0.0025", "1"), 10)
    w3.add_molecules(Species("A", "0.0025", "1"), 10)
    w4.add_molecules(Species("A", "0.0025", "1"), 10)
Once you bind a NetworkModel to the World, you don't need to give
attributes. The World will ask attributes to the bound NetworkModel.

.. code:: python

    m = NetworkModel()
    m.add_species_attribute(Species("A", "0.0025", "1"))
    m.add_species_attribute(Species("B", "0.0025", "1"))
    
    w1.bind_to(m)
    w2.bind_to(m)
    w3.bind_to(m)
    w4.bind_to(m)
    w1.add_molecules(Species("B"), 20)
    w2.add_molecules(Species("B"), 20)
    w3.add_molecules(Species("B"), 20)
    w4.add_molecules(Species("B"), 20)
Similarly, remove\_molecules and num\_molecules are also available.

.. code:: python

    w1.remove_molecules(Species("B"), 5)
    w2.remove_molecules(Species("B"), 5)
    w3.remove_molecules(Species("B"), 5)
    w4.remove_molecules(Species("B"), 5)
    print w1.num_molecules(Species("A")), w2.num_molecules(Species("A")), w3.num_molecules(Species("A")), w4.num_molecules(Species("A"))
    print w1.num_molecules(Species("B")), w2.num_molecules(Species("B")), w3.num_molecules(Species("B")), w4.num_molecules(Species("B"))

.. parsed-literal::

    10 10.0 10 10
    15 15.0 15 15


World class also owns the simulation time.

.. code:: python

    print w1.t(), w2.t(), w3.t(), w4.t()
    w1.set_t(1.0)
    w2.set_t(1.0)
    w3.set_t(1.0)
    w4.set_t(1.0)
    print w1.t(), w2.t(), w3.t(), w4.t()

.. parsed-literal::

    0.0 0.0 0.0 0.0
    1.0 1.0 1.0 1.0


Finally, you can save/load the state of a World into/from a HDF5 file.

.. code:: python

    w1.save("gillespie.h5")
    w2.save("ode.h5")
    w3.save("lattice.h5")
    w4.save("bd.h5")
    del w1, w2, w3, w4
.. code:: python

    w1 = GillespieWorld(Real3(1, 1, 1))
    w2 = ODEWorld(Real3(1, 1, 1))
    w3 = LatticeWorld(Real3(1, 1, 1))
    w4 = BDWorld(Real3(1, 1, 1))
    print w1.t(), tuple(w1.edge_lengths()), w1.volume(), w1.num_molecules(Species("A")), w1.num_molecules(Species("B"))
    print w2.t(), tuple(w2.edge_lengths()), w2.volume(), w2.num_molecules(Species("A")), w2.num_molecules(Species("B"))
    print w3.t(), tuple(w3.edge_lengths()), w3.volume(), w3.num_molecules(Species("A")), w3.num_molecules(Species("B"))
    print w4.t(), tuple(w4.edge_lengths()), w4.volume(), w4.num_molecules(Species("A")), w4.num_molecules(Species("B"))

.. parsed-literal::

    0.0 (1.0, 1.0, 1.0) 1.0 0 0
    0.0 (1.0, 1.0, 1.0) 1.0 0.0 0.0
    0.0 (1.0, 1.0, 1.0) 1.0 0 0
    0.0 (1.0, 1.0, 1.0) 1.0 0 0


.. code:: python

    w1.load("gillespie.h5")
    w2.load("ode.h5")
    w3.load("lattice.h5")
    w4.load("bd.h5")
    print w1.t(), tuple(w1.edge_lengths()), w1.volume(), w1.num_molecules(Species("A")), w1.num_molecules(Species("B"))
    print w2.t(), tuple(w2.edge_lengths()), w2.volume(), w2.num_molecules(Species("A")), w2.num_molecules(Species("B"))
    print w3.t(), tuple(w3.edge_lengths()), w3.volume(), w3.num_molecules(Species("A")), w3.num_molecules(Species("B"))
    print w4.t(), tuple(w4.edge_lengths()), w4.volume(), w4.num_molecules(Species("A")), w4.num_molecules(Species("B"))

.. parsed-literal::

    1.0 (1.0, 2.0, 3.0) 6.0 10 15
    1.0 (1.0, 2.0, 3.0) 6.0 10.0 15.0
    1.0 (1.0, 2.0, 3.0) 6.0 10 15
    1.0 (1.0, 2.0, 3.0) 6.0 10 15


